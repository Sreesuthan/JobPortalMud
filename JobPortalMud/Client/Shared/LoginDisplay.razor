@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

@inject NavigationManager navigationManager
@inject IUserService UserService
@inject HttpClient Http
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider Auth

<AuthorizeView>
    <Authorized>
        @if (role.UserName.Length > 0 && role.Name == "Admin")
        {
            <MudMenu Icon="@Icons.Material.Filled.Person" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Inherit">
                <ChildContent>
                    <MudMenuItem>Signed in as<br /><b>Admin</b></MudMenuItem>
                    <MudDivider />
                    <MudMenuItem><a style="text-decoration: none" href="Identity/Account/Logout">Logout</a></MudMenuItem>
                </ChildContent>
            </MudMenu>
        }

        @if (role.UserName.Length > 0 && role.Name == "Employer")
        {
            <MudMenu Icon="@Icons.Material.Filled.Person" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Inherit">
                <ChildContent>
                    <MudMenuItem>Hello, <b>@context.User.Identity.Name!</b></MudMenuItem>
                    <MudDivider/>
                    <MudMenuItem OnClick="() => UploadPhoto(context.User.Identity.Name)">@(user1.ProfileImage.Length > 0 ? "Update Photo" : "Upload Photo")</MudMenuItem>
                    <MudDivider/>
                    <MudMenuItem><a style="text-decoration: none" href="Identity/Account/Logout">Logout</a></MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        @if (role.UserName.Length > 0  && (role.Name == "Job Seeker"))
        {
            <MudMenu Icon="@Icons.Material.Filled.Person" Size="Size.Large" Variant="Variant.Outlined" Color="Color.Inherit">
                <ChildContent>
                    <MudMenuItem>Hello, <b>@UserName!</b></MudMenuItem>
                    <MudDivider/>
                    <MudMenuItem OnClick="() => Profile(context.User.Identity.Name)">My Profile</MudMenuItem>
                    <MudDivider/>
                    <MudMenuItem><a style="text-decoration: none" href="Identity/Account/Logout">Logout</a></MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
    </Authorized>
    <NotAuthorized>
        <MudButton Href="Identity/Account/Login" Size="Size.Medium" Variant="Variant.Text" Color="Color.Inherit" Class="mr-4 mt-4">Log in</MudButton>
        <MudButton Href="Identity/Account/Register" Size="Size.Medium" Variant="Variant.Outlined" Color="Color.Inherit" Class="mr-4 mt-4">Sign Up</MudButton>
    </NotAuthorized>
</AuthorizeView>


@code{
    Role role = new Role();
    User user1 = new User();
    public string Image = "";
    public string UserName = "";

    protected override async Task OnInitializedAsync()
    {
        var userDetails = (await Auth.GetAuthenticationStateAsync()).User.Identity;
        if (userDetails != null && userDetails.IsAuthenticated)
        {
            var user = userDetails.Name; 
            string[] strings = user.ToString().Split('@');
            UserName = strings[0];

            var result = await Http.GetFromJsonAsync<Role>($"api/User/role/{user}");
            if (result != null)
            {
                role = result;
            }

            if (user != null)
            {
                user1 = await UserService.GetSingleUser(user);
            }
        }
    }

    void Profile(string username)
    {
        navigationManager.NavigateTo($"profile/{username}");
    }

    void UploadPhoto(string username)
    {
        navigationManager.NavigateTo($"uploadphoto/{username}");
    }
}