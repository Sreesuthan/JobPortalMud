@page "/postjob/{username}"
@using JobPortalMud.Shared;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IJobService JobService
@inject HttpClient Http
@inject MudBlazor.ISnackbar snackBar



<MudGrid Style="background-image: url('Images/apply.jpg');" Class="rounded-lg">
    <MudItem xs="7">
        <MudText Typo="Typo.h4" Align="Align.Start" GutterBottom="true"><b>Post a Job</b></MudText>
        <a href="/">Home</a> <span class="mx-2 slash">/</span>
        <span class="text-black"><b>Post a job</b></span>
    </MudItem>
</MudGrid>
<br />

<EditForm Model="job" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudCard Class="mt-8">
        <MudCardContent>
            <MudSelect Label="Job or Internship" @bind-Value="job.EmploymentType">
                @foreach (var employmentType in employmentTypes)
                {
                    <MudSelectItem Value="employmentType.EmploymentType">@employmentType.EmploymentType</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Title" @bind-Value="job.Title" For="@(()=>job.Title)"></MudTextField>
            <MudNumericField Label="No. of Post" @bind-Value="job.NoOfPost" For="@(()=>job.NoOfPost)" HelperText="Minimum Value is 1."></MudNumericField>
            <MudTextField Label="Description" @bind-Value="job.Description" Lines="4" For="@(()=>job.Description)"></MudTextField>
            <MudSelect Label="Category" @bind-Value="job.CategoryId">
            @foreach (var category in categories)
            {
                <MudSelectItem Value="category.Id">@category.Category</MudSelectItem>
            }
            </MudSelect>
            <MudTextField Label="Experience" @bind-Value="job.Experience" For="@(()=>job.Experience)"></MudTextField>
            <MudTextField Label="Specialization Required" @bind-Value="job.Specialization" Lines="4" For="@(()=>job.Specialization)"></MudTextField>
            <MudDatePicker Label="Last Date to Apply" @bind-Date="job.LastDateToApply"/>
            <MudTextField Label="Salary" @bind-Value="job.Salary" For="@(()=>job.Salary)"></MudTextField>
            <MudSelect Label="Job Type" @bind-Value="job.JobType">
            @foreach (var jobtype in jobTypes)
            {
                <MudSelectItem Value="jobtype.JobType">@jobtype.JobType</MudSelectItem>
            }
            </MudSelect>
            <MudTextField Label="Company Name" @bind-Value="job.CompanyName" For="@(()=>job.CompanyName)"></MudTextField>
            <MudTextField Label="Website" @bind-Value="job.Website" For="@(()=>job.Website)"></MudTextField>
            <MudTextField Label="Email" @bind-Value="job.Email" For="@(()=>job.Email)"></MudTextField>
            <MudTextField Label="Location" @bind-Value="job.Address" For="@(()=>job.Address)"></MudTextField>
            <MudTextField Label="State" @bind-Value="job.State" For="@(()=>job.State)"></MudTextField>
            <MudSelect Label="Country" @bind-Value="job.Country">
            @foreach (var country in countries)
            {
                <MudSelectItem Value="country.Country">@country.Country</MudSelectItem>
            }
            </MudSelect>
            <br/>
            <br/>
            <MudFileUpload id="fileInput" T="IBrowserFile" Accept=".jpg, .jpeg, .png" OnFilesChanged="OnFileChange" MaximumFileCount="1" />
            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Filled.CloudUpload" for="fileInput">Select Company Logo</MudButton>
            <MudImage Src="@job.CompanyImage" Elevation="25" Class="rounded my-2"></MudImage>
        </MudCardContent>
    </MudCard>

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" Class="mr-4 mt-4">Post Job/Internship</MudButton>
    
</EditForm>

@code {
    [Parameter]
    public string? UserName { get; set; } 

    JobPortalMud.Shared.JobList job = new JobPortalMud.Shared.JobList();
    public List<JobTypes>? jobTypes = new List<JobTypes>();
    public List<Countries>? countries = new List<Countries>();
    public List<Categories>? categories = new List<Categories>();
    public List<EmploymentTypes>? employmentTypes = new List<EmploymentTypes>();


    protected override async Task OnInitializedAsync()
    {
        var result1 = await Http.GetFromJsonAsync<List<JobTypes>>("api/JobList/jobtypes");
        if (result1 != null)
        {
            jobTypes = result1;
        }
        var result2 = await Http.GetFromJsonAsync<List<Countries>>("api/JobList/countries");
        if (result2 != null)
        {
            countries = result2;
        }
        var result3 = await Http.GetFromJsonAsync<List<Categories>>("api/JobList/categories");
        if (result3 != null)
        {
            categories = result3;
        }
        var result4 = await Http.GetFromJsonAsync<List<EmploymentTypes>>("api/JobList/employmenttypes");
        if (result4 != null)
        {
            employmentTypes = result4;
        }
    }

    async Task HandleSubmit()
    {
        if (job.CompanyImage.Length > 0)
        {
            job.CreateDate = DateTime.Now;
            job.Active = true;
            job.Employer = UserName;
            await JobService.CreateJob(job, UserName);
            snackBar.Add("Job/Intership Posted Successfully", Severity.Success);
        }
        else
        {
            snackBar.Add("Please select Logo...", Severity.Warning);
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        if (IsValidExtension(e.File))
        {
            var format = e.File.ContentType;
            var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            job.CompanyImage = imageData;
        }
        else
        {
            snackBar.Add("Please select .jpg, .jpeg, .png files only...", Severity.Warning);
        }
    }

    bool IsValidExtension(IBrowserFile file)
    {
        bool isValid = false;
        string[] fileExtension = { ".jpg", ".jpeg", ".png" };

        for (int i = 0; i <= fileExtension.Length - 1; i++)
        {
            if (file.Name.Contains(fileExtension[i]))
            {
                isValid = true;
                break;
            }
            else
            {
                isValid = false;
            }
        }
        return isValid;
    }
}