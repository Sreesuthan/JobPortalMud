@page "/internshiplist/{username}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime Js

<MudGrid Style="background-image: url('Images/apply.jpg');" Class="rounded-lg">
    <MudItem xs="7">
        <MudText Typo="Typo.h4" Align="Align.Start" GutterBottom="true"><b>Posted Internships</b></MudText>
        <a href="/">Home</a> <span class="mx-2 slash">/</span>
        <span class="text-black"><b>Posted Internships</b></span>
    </MudItem>
</MudGrid>
<br />
@if (jobs.Count != 0)
{
        <MudTable Items="jobs" Elevation="10" Hover="true" Striped="true" Dense="true" Filter="new Func<JobPortalMud.Shared.JobList, bool>(Search)" Class="mt-8 mb-10">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchstring" Placeholder="Search jobs..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" HelperText="Enter Job title or Job Type or Country"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
            <MudTh>Sr.No</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>No. Of Post</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Paid/Unpaid</MudTh>
            <MudTh>Company</MudTh>
            <MudTh>State</MudTh>
            <MudTh>Country</MudTh>
            <MudTh>Posted On</MudTh>
            <MudTh>Ends On</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Edit</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Sr.No">@context.SrNo</MudTd>
            <MudTd DataLabel="JobTitle">@context.Title</MudTd>
            <MudTd DataLabel="No. Of Post">@context.NoOfPost </MudTd>
            <MudTd DataLabel="Qualification">@context.Category</MudTd>
            <MudTd DataLabel="Type">@context.JobType</MudTd>
            <MudTd DataLabel="Paid/Unpaid">@(context.EmploymentType == "Unpaid Internship" ? "Unpaid" : "Paid")</MudTd>
            <MudTd DataLabel="Company">@context.CompanyName</MudTd>
            <MudTd DataLabel="State">@context.State</MudTd>
            <MudTd DataLabel="Country">@context.Country</MudTd>
            @{
                if (context.CreateDate.ToString().Length > 0)
                {
                    var date = context.CreateDate.ToString();
                    string[] strings = date.ToString().Split(' ');
                    ValidCreateDate = strings[0];
                }
            }
            <MudTd DataLabel="Posted On">@ValidCreateDate</MudTd>
            @{
                if (context.LastDateToApply.ToString().Length > 0)
                {
                    var date = context.LastDateToApply.ToString();
                    string[] strings = date.ToString().Split(' ');
                    ValidLastDateToApply = strings[0];
                }
            }
            <MudTd DataLabel="Ends On">@ValidLastDateToApply</MudTd>
            <MudTd DataLabel="Status">@(context.Active == true ? "Active" : "Inactive")</MudTd>
                <MudTd DataLabel="Edit">
                            <MudIconButton OnClick="() => EditJob(context.JobId, UserName)"
                           Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Info"
                           Variant="Variant.Filled">
                    </MudIconButton>
                </MudTd>
                        <MudTd DataLabel="Delete">
                            <MudIconButton OnClick="() => DeleteJob(context.JobId, UserName)"
        Icon="@Icons.Material.Filled.Delete" 
                Color="Color.Error" 
                Variant="Variant.Filled">
                    </MudIconButton></MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] {5, 10, 15, 20, 50, 100}" />
                    </PagerContent>
                </MudTable>
}
else
{
    <MudText Typo="Typo.h5" Align="Align.Start" GutterBottom="true" Class="mt-8 mb-10">No Internships found...</MudText>
}

@code {
    [Parameter]
    public string? UserName { get; set; }
    private string searchstring = "";
    public string ValidCreateDate = string.Empty;
    public string ValidLastDateToApply = string.Empty;

    public List<JobPortalMud.Shared.JobList>? jobs = new List<JobPortalMud.Shared.JobList>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<JobPortalMud.Shared.JobList>>($"api/JobList/internships/{UserName}");
            if (result != null)
            {
                jobs = result;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void EditJob(int id, string user)
    {
        navigationManager.NavigateTo($"editjob/{id}/{user}");
    }

    private async Task DeleteJob(int id, string user)
    {
        if (!await Js.InvokeAsync<bool>("confirm", "Are you sure you want to delete?"))
        {
            return;
        }
        else
        {
            var result = await Http.DeleteAsync($"api/JobList/int/{id}/{user}");
            var response = await result.Content.ReadFromJsonAsync<List<JobPortalMud.Shared.JobList>>();
            jobs = response;
            navigationManager.NavigateTo($"internshiplist/{user}");
            snackBar.Add("Internship Deleted Successfully", Severity.Success);
        }
    }

    private bool Search(JobPortalMud.Shared.JobList job)
    {
        if (job.Title != null && job.JobType != null && job.Country != null &&
            (job.Title.Contains(searchstring, StringComparison.OrdinalIgnoreCase) ||
            job.Country.Contains(searchstring, StringComparison.OrdinalIgnoreCase) ||
            job.JobType.Contains(searchstring, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

